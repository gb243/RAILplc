
Buffer_example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000272  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000011f  00800100  00800100  00000272  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000272  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a0c  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000771  00000000  00000000  00000d50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003cd  00000000  00000000  000014c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  00001890  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000433  00000000  00000000  0000198c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000236  00000000  00000000  00001dbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001ff5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 92 00 	jmp	0x124	; 0x124 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	22 e0       	ldi	r18, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	af 31       	cpi	r26, 0x1F	; 31
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 d7 00 	call	0x1ae	; 0x1ae <main>
  88:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <FrameEmpty>:
		//	while(!(TXC0));
		//}
		return 0;
	}
	else return 1;
}
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	dc 01       	movw	r26, r24
  96:	e1 ec       	ldi	r30, 0xC1	; 193
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	88 60       	ori	r24, 0x08	; 8
  9e:	80 83       	st	Z, r24
  a0:	55 96       	adiw	r26, 0x15	; 21
  a2:	8c 91       	ld	r24, X
  a4:	55 97       	sbiw	r26, 0x15	; 21
  a6:	88 23       	and	r24, r24
  a8:	a1 f0       	breq	.+40     	; 0xd2 <FrameEmpty+0x42>
  aa:	20 e0       	ldi	r18, 0x00	; 0
  ac:	e0 ec       	ldi	r30, 0xC0	; 192
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	46 ec       	ldi	r20, 0xC6	; 198
  b2:	50 e0       	ldi	r21, 0x00	; 0
  b4:	90 81       	ld	r25, Z
  b6:	95 ff       	sbrs	r25, 5
  b8:	fd cf       	rjmp	.-6      	; 0xb4 <FrameEmpty+0x24>
  ba:	ed 01       	movw	r28, r26
  bc:	c2 0f       	add	r28, r18
  be:	d1 1d       	adc	r29, r1
  c0:	89 81       	ldd	r24, Y+1	; 0x01
  c2:	ea 01       	movw	r28, r20
  c4:	88 83       	st	Y, r24
  c6:	2f 5f       	subi	r18, 0xFF	; 255
  c8:	55 96       	adiw	r26, 0x15	; 21
  ca:	8c 91       	ld	r24, X
  cc:	55 97       	sbiw	r26, 0x15	; 21
  ce:	28 17       	cp	r18, r24
  d0:	88 f3       	brcs	.-30     	; 0xb4 <FrameEmpty+0x24>
  d2:	55 96       	adiw	r26, 0x15	; 21
  d4:	1c 92       	st	X, r1
  d6:	e1 ec       	ldi	r30, 0xC1	; 193
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	87 7d       	andi	r24, 0xD7	; 215
  de:	80 83       	st	Z, r24
  e0:	df 91       	pop	r29
  e2:	cf 91       	pop	r28
  e4:	08 95       	ret

000000e6 <BufferWrite>:
  e6:	fc 01       	movw	r30, r24
  e8:	95 89       	ldd	r25, Z+21	; 0x15
  ea:	94 31       	cpi	r25, 0x14	; 20
  ec:	48 f4       	brcc	.+18     	; 0x100 <BufferWrite+0x1a>
  ee:	df 01       	movw	r26, r30
  f0:	a9 0f       	add	r26, r25
  f2:	b1 1d       	adc	r27, r1
  f4:	11 96       	adiw	r26, 0x01	; 1
  f6:	6c 93       	st	X, r22
  f8:	9f 5f       	subi	r25, 0xFF	; 255
  fa:	95 8b       	std	Z+21, r25	; 0x15
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	08 95       	ret
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	08 95       	ret

00000104 <USART0Init>:
void USART0Init(void)
{
	// Set baud rate
	UBRR0H = (uint8_t)(UBRR_VALUE>>8);
 104:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t)UBRR_VALUE;
 108:	89 e1       	ldi	r24, 0x19	; 25
 10a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	// Set frame format to 8 data bits, no parity, 1 stop bit
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
 10e:	e2 ec       	ldi	r30, 0xC2	; 194
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	86 60       	ori	r24, 0x06	; 6
 116:	80 83       	st	Z, r24
	//enable reception and RC complete interrupt
	UCSR0B |= (1<<RXEN0)|(1<<RXCIE0);
 118:	e1 ec       	ldi	r30, 0xC1	; 193
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	80 69       	ori	r24, 0x90	; 144
 120:	80 83       	st	Z, r24
 122:	08 95       	ret

00000124 <__vector_18>:



//RX Complete interrupt service routine
ISR(USART_RX_vect)
{
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	2f 93       	push	r18
 130:	3f 93       	push	r19
 132:	4f 93       	push	r20
 134:	5f 93       	push	r21
 136:	6f 93       	push	r22
 138:	7f 93       	push	r23
 13a:	8f 93       	push	r24
 13c:	9f 93       	push	r25
 13e:	af 93       	push	r26
 140:	bf 93       	push	r27
 142:	cf 93       	push	r28
 144:	ef 93       	push	r30
 146:	ff 93       	push	r31
	uint8_t u8temp;
	while(! (UCSR0A & (1 << RXC0))){};
 148:	e0 ec       	ldi	r30, 0xC0	; 192
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	88 23       	and	r24, r24
 150:	ec f7       	brge	.-6      	; 0x14c <__vector_18+0x28>
	u8temp=UDR0;
 152:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

	//check if period char or end of buffer
	if ((BufferWrite(&rx_frame, u8temp)==1)||(u8temp=='.'))
 156:	6c 2f       	mov	r22, r28
 158:	80 ec       	ldi	r24, 0xC0	; 192
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	0e 94 73 00 	call	0xe6	; 0xe6 <BufferWrite>
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	11 f0       	breq	.+4      	; 0x168 <__vector_18+0x44>
 164:	ce 32       	cpi	r28, 0x2E	; 46
 166:	41 f4       	brne	.+16     	; 0x178 <__vector_18+0x54>
	{
		//disable reception and RX Complete interrupt
		UCSR0B &= ~((1<<RXEN0)|(1<<RXCIE0));
 168:	e1 ec       	ldi	r30, 0xC1	; 193
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	8f 76       	andi	r24, 0x6F	; 111
 170:	80 83       	st	Z, r24
		//enable transmission and UDR0 empty interrupt
		//UCSR0B |= (1<<TXEN0)|(1<<UDRIE0);

		packet_received=1; //set packet received flag
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	}
	
}
 178:	ff 91       	pop	r31
 17a:	ef 91       	pop	r30
 17c:	cf 91       	pop	r28
 17e:	bf 91       	pop	r27
 180:	af 91       	pop	r26
 182:	9f 91       	pop	r25
 184:	8f 91       	pop	r24
 186:	7f 91       	pop	r23
 188:	6f 91       	pop	r22
 18a:	5f 91       	pop	r21
 18c:	4f 91       	pop	r20
 18e:	3f 91       	pop	r19
 190:	2f 91       	pop	r18
 192:	0f 90       	pop	r0
 194:	0f be       	out	0x3f, r0	; 63
 196:	0f 90       	pop	r0
 198:	1f 90       	pop	r1
 19a:	18 95       	reti

0000019c <RXFrameParse>:

uint8_t RXFrameParse(u8frame *frame)
{
 19c:	fc 01       	movw	r30, r24
	// Check ID
	
	if(frame->ID != PLC_ID)
 19e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <PLC_ID>
 1a2:	80 81       	ld	r24, Z
 1a4:	89 13       	cpse	r24, r25

//initialize frame
void FrameInit(u8frame *pdu)
{
	//set index to start of buffer
	pdu->index=0;
 1a6:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <rx_frame+0x15>
	{
		// Reinitialize all frames as message not for us.
		FrameInit(&rx_frame);
	}
	return 0;
}
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	08 95       	ret

000001ae <main>:

//initialize frame
void FrameInit(u8frame *pdu)
{
	//set index to start of buffer
	pdu->index=0;
 1ae:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <rx_frame+0x15>
 1b2:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <tx_frame+0x15>
 1b6:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <status_frame+0x15>
	
	FrameInit(&rx_frame);
	FrameInit(&tx_frame);
	FrameInit(&status_frame);
	
	set_sleep_mode(SLEEP_MODE_IDLE);
 1ba:	83 b7       	in	r24, 0x33	; 51
 1bc:	81 7f       	andi	r24, 0xF1	; 241
 1be:	83 bf       	out	0x33, r24	; 51
	
	USART0Init();
 1c0:	0e 94 82 00 	call	0x104	; 0x104 <USART0Init>
	DDRD |= (1 << PD5);				// set Port D pin PC5 for output
 1c4:	55 9a       	sbi	0x0a, 5	; 10
	DDRD |= (1 << PD4);
 1c6:	54 9a       	sbi	0x0a, 4	; 10
	PORTD |= (1<< PD5);				// Set high to enable transmit.
 1c8:	5d 9a       	sbi	0x0b, 5	; 11
	PORTD &= ~(1<< PD4);			// Set low to enable receive.
 1ca:	5c 98       	cbi	0x0b, 4	; 11

	//enable global interrupts
	sei();
 1cc:	78 94       	sei
			FrameEmpty(&rx_frame);
			FrameInit(&rx_frame);
			packet_received=0;
			//CharacterWrite(packet_received);
			//enable reception and RC complete interrupt
			UCSR0B |= (1<<RXEN0)|(1<<RXCIE0);
 1ce:	c1 ec       	ldi	r28, 0xC1	; 193
 1d0:	d0 e0       	ldi	r29, 0x00	; 0
	while(1)
	{
				       
		//sleep_mode();

		if(packet_received==1)
 1d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	e1 f7       	brne	.-8      	; 0x1d2 <main+0x24>
		{
			RXFrameParse(&rx_frame);			
 1da:	80 ec       	ldi	r24, 0xC0	; 192
 1dc:	91 e0       	ldi	r25, 0x01	; 1
 1de:	0e 94 ce 00 	call	0x19c	; 0x19c <RXFrameParse>
			FrameEmpty(&rx_frame);
 1e2:	80 ec       	ldi	r24, 0xC0	; 192
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	0e 94 48 00 	call	0x90	; 0x90 <FrameEmpty>

//initialize frame
void FrameInit(u8frame *pdu)
{
	//set index to start of buffer
	pdu->index=0;
 1ea:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <rx_frame+0x15>
		if(packet_received==1)
		{
			RXFrameParse(&rx_frame);			
			FrameEmpty(&rx_frame);
			FrameInit(&rx_frame);
			packet_received=0;
 1ee:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			//CharacterWrite(packet_received);
			//enable reception and RC complete interrupt
			UCSR0B |= (1<<RXEN0)|(1<<RXCIE0);
 1f2:	88 81       	ld	r24, Y
 1f4:	80 69       	ori	r24, 0x90	; 144
 1f6:	88 83       	st	Y, r24
 1f8:	ec cf       	rjmp	.-40     	; 0x1d2 <main+0x24>

000001fa <_exit>:
 1fa:	f8 94       	cli

000001fc <__stop_program>:
 1fc:	ff cf       	rjmp	.-2      	; 0x1fc <__stop_program>
